#!/usr/bin/perl
use warnings;
use strict;
use Getopt::Std;
use LWP::UserAgent;
use XML::XPath;

#
# Check Solr status/statistics
# e.g. solr_check -H localhost
#
# (c) 2013 Surendra Mohan.
# Copying and distributing this file, with or without modification, are permitted in any medium without credit/royalty provided the copyright
# notice and this notice are preserved.  This file is offered as-is, without any warranty.
#

# About the check
my $script             = "solr_check";
my $script_version     = "1.0";
my $script_description = "Extracts information from Apache Solr and performs checks on the results";

# Return values - Nagios
# OK = 0
# WARNING = 1
# CRITICAL = 2
# UNKNOWN = 3

my $returnStr = "plugin error";
my $perfData = "";
my @alertStr = ("OK", "WARNING", "CRITICAL", "UNKNOWN");
my $exitCode = 3;

# variables
my %opts;
getopts('shH:p:u:o:w:c:n:', \%opts);
# secure flag; host; port; url portion; option (ping/cache/response/numdocs); warning; critical; handler name 

my $protocol = 'http';
my $hostname;
my $port = 8080;
my $path = '/solr/admin/ping';

my $metric = 'ping';
my $handlerName = 'standard';

my $warning;
my $critical;

## process command line arguments

if ($opts{'h'}) {
    usage();
    exit 0;
}

# secure flag
if ($opts{'s'}) {
	$protocol = 'https';
}

# Hostname
if ($opts{'H'}) {
    $hostname = $opts{'H'};
}
else {
    print 'No hostname specified\n';
    usage();
    exit 3;
}

# User specified port number
if ($opts{'p'}) {
    if ( $opts{'p'} !~ /[0-9]+/ ) {
        print 'Specify port number as an integer\n';
        exit 3;
    }

    $port = $opts{'p'};
}

# metric option
if ($opts{'o'}) {
	if ( $opts{'o'} eq 'ping' ) {
		# path and metric already defaulted to ping
	} 
	elsif ( $opts{'o'} eq 'cache' || $opts{'o'} eq 'response' || $opts{'o'} eq 'numdocs' || $opts{'o'} eq 'updates' ) {
		$metric = $opts{'o'};
		$path = '/solr/admin/stats.jsp';
	} 
	else {
        print "Unsupported option $opts{'o'}\n";
        usage();
        exit 3;
    }	
}

# specified query handler name
if ( $opts{'n'} ) {
	$handlerName = $opts{'n'};
}

# specified path portion of the URL
if ( $opts{'u'} ) {
	$path = $opts{'u'};
}

my $url = "${protocol}://${hostname}:${port}${path}";
#print "URL: $url\n";

# thresholds
if ( $opts{'w'} ) {
	$warning = $opts{'w'};
}
if ( $opts{'c'} ) {
	$critical = $opts{'c'};
}


# Make the GET request to Solr
my $ua = LWP::UserAgent->new;
my $req = HTTP::Request->new( GET => $url );
my $res = $ua->request($req);

# if we have a HTTP 200 OK response
if ( $res->is_success ) {
	# get content as XML
	my $xp = XML::XPath->new( xml => $res->content );

	if ( $metric eq 'ping' ) {
		$returnStr = "Solr ping status";
  
		if ( $xp->exists("/response[str='OK']/str[\@name='status']") ) {
			# We've got <str name="status">OK</str>
			$exitCode = 0;
		}
		else {
			$exitCode = 2;
		}
	}
	else {
		# these are from stats.jsp
		my $core = $xp->getNodeText('/solr/core')->string_value();
		my $schema = $xp->getNodeText('/solr/schema')->string_value();

		$returnStr = "Solr Core: $core - schema: $schema";

		if ( $metric eq 'numdocs' ) {
			# process the CORE searcher entry
			if ( $xp->exists("/solr/solr-info/CORE/entry[normalize-space(name)='searcher']") ) {
				my $numDocs = $xp->getNodeText("/solr/solr-info/CORE/entry[normalize-space(name)='searcher']/stats/stat[\@name='numDocs']")->string_value();;

				# Clean up the strings
				$numDocs = trim($numDocs);
	
				$exitCode = 0;
	  
				# append to output
				$returnStr = $returnStr . " - numDocs=${numDocs}";
				$perfData = $perfData . "numDocs=${numDocs};;;; ";
			}
			else {
				# exit code stays as UNKNOWN
				$returnStr = $returnStr . " - Core 'searcher' not found!"
			}
		}
		elsif ( $metric eq 'cache' ) {
			my $n = 1;

			# loop through the CACHE entries
			while ( $xp->exists("/solr/solr-info/CACHE/entry[$n]") ) {
				my $name = $xp->getNodeText("/solr/solr-info/CACHE/entry[$n]/name")->string_value();

				# Don't bother if it doesn't have a hit ratio (e.g. fieldCache which is managed by Lucene)
				if ( $xp->exists("/solr/solr-info/CACHE/entry[$n]/stats/stat[\@name='hitratio']") ) {
					my $hitratio = $xp->getNodeText("/solr/solr-info/CACHE/entry[$n]/stats/stat[\@name='hitratio']")->string_value();
      
      				# Clean up the strings
      				$name = trim($name);
      				$hitratio = trim($hitratio);

      				# append to performance data
      				$perfData = $perfData . "'$name hit ratio'=$hitratio\%;;;; ";
    			}
    
    			$n++;
  			}

  			$exitCode = 0;
		}
		elsif ( $metric eq 'response' ) {
			# process the specific named QUERYHANDLER stats
			if ( $xp->exists("/solr/solr-info/QUERYHANDLER/entry[normalize-space(name)='$handlerName']") ) {
				my $avgResponseTime = $xp->getNodeText("/solr/solr-info/QUERYHANDLER/entry[normalize-space(name)='$handlerName']/stats/stat[\@name='avgTimePerRequest']")->string_value();;
				my $requests = $xp->getNodeText("/solr/solr-info/QUERYHANDLER/entry[normalize-space(name)='$handlerName']/stats/stat[\@name='requests']")->string_value();;
				my $qps = $xp->getNodeText("/solr/solr-info/QUERYHANDLER/entry[normalize-space(name)='$handlerName']/stats/stat[\@name='avgRequestsPerSecond']")->string_value();;

				# Clean up the string
    			$requests = trim($requests);

    			if ($requests == 0) {      
      				$returnStr = $returnStr . " - Query handler ${handlerName} has had no requests.";
      				$exitCode = 3;
    			} else {
      				$avgResponseTime = trim($avgResponseTime);
      				$qps = trim($qps);
      
      				# threshold checks
      				if ( $critical && $avgResponseTime >= $critical ) {
      					$exitCode = 2;
      				}
      				elsif ( $warning && $avgResponseTime >= $warning ) {
      					$exitCode = 1;
      				} 
      				else {
      					$exitCode = 0;
      				}
      
					# append to output
					$returnStr = $returnStr . " - ${handlerName} avgResponseTime=${avgResponseTime}";
	  				$perfData = $perfData . "'${handlerName} avgResponseTime'=${avgResponseTime}ms;;;; '${handlerName} requests'=${requests}c;;;; '${handlerName} qps'=${qps};;;; ";
    			}
  			}
  			else {
    			# exit code stays as UNKNOWN
    			$returnStr = $returnStr . " - Query handler ${handlerName} not found!"
  			}
		}
		elsif ( $metric eq 'updates' ) {
			# get the UPDATEHANDLER stats
			if ( $xp->exists("/solr/solr-info/UPDATEHANDLER/entry[normalize-space(name)='updateHandler']") ) {
				# Stats to gather
				my @updateStats = ('cumulative_adds', 'commits', 'optimizes', 'docsPending', 'deletesById', 'deletesByQuery');

				foreach my $stat ( @updateStats ) {
					my $value = $xp->getNodeText("/solr/solr-info/UPDATEHANDLER/entry[normalize-space(name)='updateHandler']/stats/stat[\@name='$stat']")->string_value();
					$value = trim($value);
					
					# append to output
					$returnStr = $returnStr . "; ${stat}=${value}";
					$perfData = $perfData . "${stat}=${value};;;; ";
				}
      
      			$exitCode = 0;
  			}
  			else {
    			# exit code stays as UNKNOWN
    			$returnStr = $returnStr . " - Query handler ${handlerName} not found!"
  			}
		}
	}
}
else {
	$returnStr = $res->status_line;
	$exitCode = 2;
}

# and exit
print $alertStr[$exitCode] . " - $returnStr | $perfData\n";
exit $exitCode;


# Display the usage message
sub usage {
    print <<EOF
------------------------------------------------------------------------------
$script $script_version

$script_description

Usage: $script -H <hostname>

Options: -s     Use secure transport (https)
         -H     Hostname or IP address of Solr server
         -p     Solr port number (if not supplied defaults to port 8080)
         -u     URL path (defaults to /solr/admin/ping 
                or /solr/admin/stats.jsp depending on option)
         -o     Option: ping/cache/response/numdocs/updates 
                (defaults to 'ping')
         -n     Handler name for response statistics (defaults to 'standard')
         -w     Warning criteria (Integer - used by response)
         -c     Critical criteria (Integer - used by response)

------------------------------------------------------------------------------
Copyright (c) 2013 Surendra Mohan.
------------------------------------------------------------------------------
EOF

}

# trim leading & trailing spaces
sub trim {
	my ($arg) = @_;
	$arg =~ s/^\s+|\s+$//g;
	return $arg;
}